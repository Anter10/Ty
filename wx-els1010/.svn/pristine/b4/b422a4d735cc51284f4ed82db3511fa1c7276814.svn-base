let TAG = '[tt_view_play_board]';
let Board = require('../model/tt_model_board.js');
cc.Class({
    extends: cc.Component,

    properties: {
        prefabBlock: cc.Prefab,
        prefabPreview: cc.Prefab
    },

    // LIFE-CYCLE CALLBACKS:

    onLoad () {
        this.root = this.node.getChildByName('root');
        this.board = new Board();
        this.previews = [];
        this.previewsPos = [];
        this.touchIdx = -1;
        this.board.reset();
        this.initLayout();
        this.initBoardView();
        this.initPreviewBlocks();    
        this.initTouch();

        tywx.NotificationCenter.listen(tywx.tt.events.TT_FILL_BOARD, this.onFillBoard, this);
        tywx.NotificationCenter.listen(tywx.tt.events.TT_RESET_PREVIEWS, this.onResetPreviews, this);
    },

    start () {

    },
    onDestroy(){
        tywx.NotificationCenter.ignoreScope(this);
    },

    // update (dt) {},
    initLayout(){
        this.layout = this.root.getChildByName('layout');
        this.nodeTop = this.layout.getChildByName('node_top');
        this.nodeBoard = this.layout.getChildByName('node_board');
        this.nodeBoardBottom = this.layout.getChildByName('node_board_bottom');
        this.nodeBottom = this.layout.getChildByName('node_bottom');
    },

    initBoardView(){
        // * init board view
        let [w,h] = [tywx.tt.constants.BoardWidth, tywx.tt.constants.BoardWidth];
        let c_s = tywx.tt.constants.BlockSize;
        let size = this.root.getBoundingBox();
        let padding_left = (size.width - w * c_s.width) / 2;
        let padding_bottom = this.nodeBoard.y; //size.height * 0.35; //(size.height - h * c_s.height) / 2;
        tywx.tt.log(TAG, `${w},${h},${c_s},${size},${padding_left},${padding_bottom}`);
        this.blockViews = [];

        let [x,y] = [0,0];
        let [lb_x,lb_y,rt_x,rt_y] = [0,0,0,0];
        let idx = true;
        for(let i = 0; i < h; ++i){
            y = padding_bottom + i * c_s.height;
            this.blockViews[i] = [];
            idx = i % 2 === 0 ? true : false;
            for(let j = 0; j < w; ++j){
                x = padding_left + j * c_s.width;
                let tmp_block = cc.instantiate(this.prefabBlock);
                tmp_block.parent = this.root;
                tmp_block.getComponent('tt_view_block').setStat(-2);
                tmp_block.getComponent('tt_view_block').setBgColor(idx?cc.color('#092D41'):cc.color('#FFFFFF'));
                idx = !idx;
                tmp_block.position = cc.v2(x,y);
                this.blockViews[i][j] = tmp_block;
                lb_x = x <= lb_x ? x : lb_x;
                rt_x = x >= rt_x ? x : rt_x;
            }
            lb_y = y <= lb_y ? y : lb_y;
            rt_y = y >= rt_y ? y : rt_y;
        }
        this.lbPos = cc.v2(lb_x, lb_y);
        this.rtPos = cc.v2(rt_x, rt_y);
    },
    initPreviewBlocks(){
        this.previews = [];
        let self = this;
        let [x,y] = [0,this.nodeBoardBottom.y];
        let previewConfigs = this.board.getPreviewConfigs();
        for(let i = 0; i < previewConfigs.length; i++){
            let tmp_preview = cc.instantiate(this.prefabPreview);
            tmp_preview.parent = this.root;
            tmp_preview.getComponent('tt_view_priview_blocks').init(previewConfigs[i]);
            self.previews.push(tmp_preview);
            x = (i + 1) * 144 + 144 / 2;
            tmp_preview.position = cc.v2(x,y);
            this.previewsPos.push(cc.v2(x,y));
        }
    },
    initTouch(){
        let self = this;
        this.root.on(cc.Node.EventType.TOUCH_START,event=>{
            tywx.tt.log(TAG, 'touch start');
            let pos = event.getLocation();
            self.touchIdx = -1;
            for(let i = 0; i < self.previews.length; i++){
                let preview = self.previews[i];
                let [x,y] = [preview.x,preview.y];
                let [w,h] = [130,130];//[preview.width,preview.height];
                let [lb_x, lb_y] = [x - w / 2, y - h / 2];
                let [rt_x, rt_y] = [x + w / 2, y + h / 2];
                if(pos.x >= lb_x && pos.x <= rt_x && pos.y >= lb_y && pos.y <= rt_y){
                    self.touchIdx = i;
                    preview.getComponent('tt_view_priview_blocks').touch();
                    tywx.tt.log(TAG, `x[${lb_x},${pos.x},${rt_x}],y[${lb_y},${pos.y},${rt_y}]`);
                }
            }
        });
        this.root.on(cc.Node.EventType.TOUCH_MOVE,event=>{
            //tywx.tt.log(TAG, 'touch move');
            let pos = event.getLocation();
            if(self.touchIdx !== -1 && self.touchIdx < self.previews.length){
                let preview = self.previews[self.touchIdx];
                preview.position = pos;
                self.refreshShadowFrame();
            }
        });
        this.root.on(cc.Node.EventType.TOUCH_END,event=>{
            tywx.tt.log(TAG, 'touch end');
            let pos = event.getLocation();
            if(self.touchIdx !== -1 && self.touchIdx < self.previews.length){
                let is_put_success = false;
                if(pos.x >= self.lbPos.x 
                    && pos.x <= self.rtPos.x 
                    && pos.y >= self.lbPos.y 
                    && pos.y <= self.rtPos.y)
                {
                    is_put_success = true;
                }
                let preview = self.previews[self.touchIdx];
                preview.position = self.previewsPos[self.touchIdx];
                let preview_sc = preview.getComponent('tt_view_priview_blocks');
                if(is_put_success){
                    let config = preview_sc.config;
                    if(self.fillBoard(pos, config)){
                        preview_sc.put();
                    }
                    else{
                        preview_sc.touchCancle();
                    }
                }
                else{
                    preview_sc.touchCancle();
                }
            }
            self.touchIdx = -1;
        });
    },
    refreshShadowFrame(){
        if(this.touchIdx < 0 || this.touchIdx >= this.previews.length) {
            tywx.tt.warn(TAG, `wrong touch index when call refreshShadowFrame , touchIdx=${this.touchIdx}`);
            return;
        }
        //tywx.tt.log(TAG,`refreshShadowFrame touchIdx=${this.touchIdx}`);
        let select_preview = this.previews[this.touchIdx];
        let select_pos = select_preview.position;
        let select_config = select_preview.getComponent('tt_view_priview_blocks').getConfig();
        let [c_r,c_c] = [-1,-1];
        let [m_r,m_c] = [tywx.tt.constants.BoardHeight, tywx.tt.constants.BoardWidth];

        let row = this.blockViews.length;
        for(let r = 0; r < row; ++r){
            let col = this.blockViews[r].length;
            for(let c = 0; c < col; ++c){
                let tmp_block_view = this.blockViews[r][c];
                let tmp_block_sc = tmp_block_view.getComponent('tt_view_block');
                let [x,y,w,h] = [tmp_block_view.x,tmp_block_view.y,tmp_block_view.width,tmp_block_view.height];
                let [lb_x,lb_y,rt_x,rt_y] = [x, y, x + w, y + h];
                if(select_pos.x >= lb_x 
                    && select_pos.x <= rt_x 
                    && select_pos.y >= lb_y 
                    && select_pos.y <= rt_y){
                    [c_r,c_c] = [r,c];
                    tmp_block_sc.setStat(-1);
                }
                else{
                    tmp_block_sc.setStat(-2);
                }
            }
        }

        if(c_r !== -1 && c_c !== -1){
            let BlockMap = tywx.tt.constants.BlockMap;
            let debug_infos = [];
            for(let r = 0; r < select_config.length; ++r){
                let line = select_config[r];
                for(let c = 0; c < line.length; ++c){
                    let dis = BlockMap[r][c];
                    if(select_config[r][c] !== 0){
                        let [b_r,b_c] = [c_r + dis[1],c_c + dis[0]];
                        if(b_r >= 0 && b_r < m_r
                            && b_c >= 0 && b_c < m_c){
                                let tmp_block_view = this.blockViews[b_r][b_c];
                                let tmp_block_sc = tmp_block_view.getComponent('tt_view_block');
                                tmp_block_sc.setStat(-1);
                                debug_infos.push(`{c=${b_c},r=${b_r}}`);
                        }
                    }
                }
            }
            if(debug_infos.length < 4){
                tywx.tt.warn(TAG, `{cr=${c_r},cc=${c_c}}`,[...debug_infos]);
            }
        }
    },
    fillBoard(pos,config){
        let ret = false;
        let view_data = this.getBlockViewByPosition(pos);
        if(view_data.blockView){
            if(this.board.isCanFill(view_data.centerRow, view_data.centerCol, config)){
                ret = true;
                this.board.fillBaordByConfig(view_data.centerRow, view_data.centerCol, config, this.touchIdx);
            }
            else{
                ret = false;
            }
        }
        return ret;
    },
    /**
     * @description
     * @author lu ning
     * @date 2018-10-09
     * @param {cc.Vec2} pos 指定坐标
     * @returns {Object} ret 
     *    ret.blockView
     *    ret.centerRow
     *    ret.centerCol
     */
    getBlockViewByPosition(pos){
        let ret = null;
        let [m_r,m_c] = [tywx.tt.constants.BoardHeight, tywx.tt.constants.BoardWidth];
        let [c_r,c_c] = [-1,-1];
        let block_view = null;
        for(let r = 0; r < m_r; ++r){
            for(let c = 0; c < m_c; ++c){
                let tmp_block_view = this.blockViews[r][c];
                let [x,y,w,h] = [tmp_block_view.x,tmp_block_view.y,tmp_block_view.width,tmp_block_view.height];
                let [lb_x,lb_y,rt_x,rt_y] = [x, y, x + w, y + h];
                if(pos.x >= lb_x 
                    && pos.x <= rt_x 
                    && pos.y >= lb_y 
                    && pos.y <= rt_y){
                    [c_r,c_c] = [r,c];
                    block_view = tmp_block_view;
                }
            }
        }
        ret = {
            blockView: block_view,
            centerRow: c_r,
            centerCol: c_c
        };
        return ret;
    },
    onFillBoard(params){
        tywx.tt.log(TAG, 'onFillBoard' + JSON.stringify(params));
        let self = this;
        params.forEach(e => {
            let tmp_block_view = self.blockViews[e[0]][e[1]];
            let tmp_block_sc = tmp_block_view.getComponent('tt_view_block');
            tmp_block_sc.setStat(1);
        });
    },
    onResetPreviews(){
        let previewConfigs = this.board.getPreviewConfigs();
        tywx.tt.log(TAG, 'onResetPreviews==>' + previewConfigs.length);
        for(let i = 0; i < previewConfigs.length; i++){
            let config = previewConfigs[i];
            let view = this.previews[i];
            tywx.tt.log(TAG, 'onResetPreviews==>' + i);
            view.getComponent('tt_view_priview_blocks').resetByConfig(config);
        }
    }
});
