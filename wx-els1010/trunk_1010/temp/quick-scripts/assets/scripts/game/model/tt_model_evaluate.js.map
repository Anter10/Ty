{"version":3,"sources":["tt_model_evaluate.js"],"names":["TAG","Evaluate","board","blocks","tywx","tt","constants","Blocks","blockDis","BlockDis","maxDeep","deepAddScore","stepAddScore","row","BoardHeight","col","BoardWidth","r","tmp_row","c","push","log","deep","tmp_board","block_idx","ret","block_dis","fill_num","forEach","tr","e","tc","length","score","s","arr_pos","getFillPosArray","self","tmpFill","i","b1","cloneBoard","deepCount","arr","info","new_row","Map","set","_instance","module","exports"],"mappings":"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","file":"tt_model_evaluate.js","sourceRoot":"../../../../../../assets/scripts/game/model","sourcesContent":["/**\n * 棋盘评分\n */\nlet TAG = '[tt.model.evaluate]';\nclass Evaluate{\n    constructor(){\n        this.board = [];\n        this.blocks = tywx.tt.constants.Blocks;\n        this.blockDis = tywx.tt.constants.BlockDis;\n        this.maxDeep = 1;\n        this.deepAddScore = 10;\n        this.stepAddScore = 5;\n        this.row = tywx.tt.constants.BoardHeight;\n        this.col = tywx.tt.constants.BoardWidth;\n    }\n    static getInstance(){\n        if(!Evaluate._instance) Evaluate._instance = new Evaluate();\n        return Evaluate._instance;\n    }\n    initBoard(){\n        this.board = [];\n        for(let r = 0; r < this.row; ++r){\n            let tmp_row = [];\n            for(let c = 0; c < this.col; ++c){\n                tmp_row.push(0);\n            }\n        }\n    }\n    outPutBoard(){\n        for(let r = this.row - 1; r >= 0; --r){\n            tywx.tt.log(TAG, this.board[r]);\n        }\n    }\n    setMaxDeep(deep){\n        this.maxDeep = deep;\n    }\n    getFillPosArray(tmp_board, block_idx){\n        let ret = [];\n        for(let r = 0; r < tmp_board.length; ++r){\n            let tmp_row = tmp_board[r];\n            for(let c = 0; c < tmp_row.length; ++c){\n                let block_dis = this.blockDis[block_idx];\n                let fill_num = 0;\n                block_dis.forEach(e=>{\n                    let [tr, tc] = [r + e[0], c + e[1]];\n                    if(tr >= 0 && tr < this.row && tc >= 0 && tc < this.col && tmp_board[tr][tc] <= 0){\n                        fill_num++;\n                    }\n                });\n                if(fill_num === block_dis.length) ret.push([r,c]);\n            }\n        }\n        return ret;\n    }\n    tmpFill(tmp_board, tr, tc, block_idx){\n        let block_dis = this.blockDis[block_idx];\n        block_dis.forEach(e=>{\n            let [r, c] = [tr + e[0], tc + e[1]];\n            //tywx.tt.log(TAG,'tmpFill', r, c, tmp_board);\n            tmp_board[r][c] = 1;\n        });\n        return tmp_board;\n    }\n    deepCount(tmp_board, block_idx, deep, score){\n        let s = score;\n        let arr_pos = this.getFillPosArray(tmp_board, block_idx);\n        let self = this;\n        if(arr_pos.length > 0 && deep < this.maxDeep){\n            arr_pos.forEach(e=>{\n                let ret = self.tmpFill(tmp_board, e[0], e[1], block_idx);\n                s += self.stepAddScore;\n                for(let i = 0; i < self.blocks.length; ++i){\n                    let b1 = self.cloneBoard(ret);\n                    s += self.deepCount(b1, i, deep + 1, s);\n                }\n            });\n            return s;\n        }\n        \n        return 0;\n    }\n    formatArray(arr){\n        let info = '';\n        arr.forEach(e=>{\n            info += `{${e[0]},${e[1]}}`;\n        });\n        return info;\n    }\n    cloneBoard(board){\n        let ret = [];\n        for(let r = 0; r < board.length; ++r){\n            let row = board[r];\n            let new_row = [];\n            for(let c = 0; c < row.length; ++c){\n                new_row[c] = row[c];\n            }\n            ret.push(new_row);\n        }\n        return ret;\n    }\n    evaluateByBoard(board){\n        let ret = new Map();\n        for(let i = 0; i < this.blocks.length; ++i){\n            let b1 = this.cloneBoard(board);\n            let score = this.deepCount(b1, i, 0, 0);\n            ret.set(i, score);\n        }\n        return ret;\n    }\n}\nEvaluate._instance = null;\nmodule.exports = Evaluate;"]}