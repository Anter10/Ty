{"version":3,"sources":["../../../../../../assets/scripts/game/model/assets/scripts/game/model/tt_model_board.js"],"names":["TAG","ModelBoard","board","w","tywx","tt","constants","BoardWidth","h","BoardHeight","score","willFillBlocks","previewConfigs","previewIndex","previewStat","clearRows","clearCols","emptyBlocks","Map","evaluate","boadrEvaluate","getInstance","resetBoard","resetPreviewConfigs","clear","i","j","set","is_use_prop","checkpreviewnumber","checkgameover","console","log","BoardView","checkPreviewActives","block_values","evaluateByBoard","entries","Constants","block_configs","Blocks","ForceRestBlocks","forEach","push","e","config_idx","parseInt","length","Math","random","block_dis","BlockDis","is_can_fill","isPreviewCanFill","NotificationCenter","trigger","events","TT_REFRESH_PREVIEW_STAT","refresh","config_dis","r","line","c","tmp_fill_length","fill_blocks","tmp_data","rr","cc","center_row","center_col","config","ret","c_r","c_c","m_r","m_c","BlockMap","need_fill_num","dis","b_r","b_c","warn","touch_idx","delete","TT_FILL_BOARD","HELP_ADD","outPutBoard","alle","every","TT_RESET_PREVIEWS","tmp_col_fill","fill_num","hasclear","TT_CLEAR_ROW","refreshPreviewStat","rows","cols","add_score","self","AddScore","cleardata","TT_REFRESH_SCORE","row","col","shadow_blocks","clear_blocks","data","tmp_col","tmp_row","TT_CLEAR_HAMMER","module","exports"],"mappings":"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","file":"tt_model_board.js","sourceRoot":"../../../../../../assets/scripts/game/model","sourcesContent":["let TAG = '[tt.model.board]';\nlet ModelBoard = class {\n    constructor() {\n        this.board = [];\n        this.w = tywx.tt.constants.BoardWidth;\n        this.h = tywx.tt.constants.BoardHeight;\n        this.score = 0;\n        this.willFillBlocks = [];\n        this.previewConfigs = []; // * 预览配置\n        this.previewIndex = [];\n        this.previewStat = [];\n        this.clearRows = [];\n        this.clearCols = [];\n        this.emptyBlocks = new Map();\n        this.evaluate = tywx.tt.boadrEvaluate.getInstance(); // * 棋盘评分实例\n    }\n    reset() {\n        this.score = 0;\n        this.resetBoard();\n        this.resetPreviewConfigs();\n    }\n    resetBoard() {\n        this.board = [];\n        this.emptyBlocks.clear();\n        for (let i = 0; i < this.h; ++i) {\n            this.board[i] = [];\n            for (let j = 0; j < this.w; ++j) {\n                this.board[i][j] = 0;\n                this.emptyBlocks.set(`${i}_${j}`, 0);\n            }\n        }\n\n    }\n\n    resetPreviewConfigs(is_use_prop = false, checkpreviewnumber = false) {\n        // * reset preview config\n        this.previewConfigs = [];\n        this.previewStat = [];\n        let checkgameover = true;\n        console.log(\"checkpreviewnumber  = \", checkpreviewnumber);\n        if (checkpreviewnumber){\n            if (tywx.tt.BoardView.checkPreviewActives() == 0) {\n                checkgameover = false;\n            }\n        }\n        let block_values = this.evaluate.evaluateByBoard(this.board);\n        tywx.tt.log(TAG, 'block_values', block_values.entries());\n\n        let Constants = tywx.tt.constants;\n        let block_configs = Constants.Blocks;\n        if (is_use_prop) {\n            block_configs = [];\n            Constants.ForceRestBlocks.forEach(e => {\n                block_configs.push(Constants.Blocks[e]);\n            });\n        }\n        for (let i = 0; i < 3; ++i) {\n            let config_idx = parseInt(block_configs.length * Math.random());\n            this.previewConfigs[i] = block_configs[config_idx];\n            if (!is_use_prop) {\n                let block_dis = Constants.BlockDis[config_idx];\n                let is_can_fill = this.isPreviewCanFill(block_dis);\n                this.previewStat[i] = is_can_fill ? 1 : 0;\n            } else {\n                //TODO: 特殊的默认都能填充，有需要再修改\n                this.previewStat[i] = 1;\n                config_idx = Constants.ForceRestBlocks[i];\n                let block_dis = Constants.BlockDis[config_idx];\n                let is_can_fill = this.isPreviewCanFill(block_dis);\n                this.previewStat[i] = is_can_fill ? 1 : 0;\n            }\n            this.previewIndex[i] = config_idx;\n        }\n        tywx.tt.log(\"出发了gameover 检测事件 tt_ model_bord 69 行 是否需要检测 = \", checkgameover);\n        if (checkgameover && !checkpreviewnumber) {\n           tywx.NotificationCenter.trigger(tywx.tt.events.TT_REFRESH_PREVIEW_STAT, null);\n        }\n    }\n\n    refreshPreviewStat(refresh) {\n        tywx.tt.log(TAG, 'refreshPreviewStat'); \n        let Constants = tywx.tt.constants;\n        for (let i = 0; i < this.previewIndex.length; ++i) {\n            let config_dis = Constants.BlockDis[this.previewIndex[i]];\n            let is_can_fill = this.isPreviewCanFill(config_dis);\n            if (!this.previewConfigs[i]) is_can_fill = false;\n            this.previewStat[i] = is_can_fill ? 1 : 0;\n            tywx.tt.log(TAG, 'refreshPreviewStat', `idx:${i},stat:${this.previewStat[i]}`);\n        }\n        tywx.tt.log(\"出发了gameover 检测事件 tt_ model_bord 79 行\" + refresh);\n        if (!refresh) {\n            tywx.NotificationCenter.trigger(tywx.tt.events.TT_REFRESH_PREVIEW_STAT, null);\n        }\n    }\n\n    isPreviewCanFill(block_dis) {\n        for (let r = 0; r < this.board.length; ++r) {\n            let line = this.board[r];\n            for (let c = 0; c < line.length; ++c) {\n                let tmp_fill_length = 0;\n                let fill_blocks = [];\n                for (let i = 0; i < block_dis.length; i++) {\n                    let tmp_data = block_dis[i];\n                    let [rr, cc] = [r + tmp_data[0], c + tmp_data[1]];\n                    if (rr >= 0 && rr < this.h &&\n                        cc >= 0 && cc < this.w &&\n                        this.board[rr][cc] <= 0) {\n                        tmp_fill_length++;\n                        fill_blocks.push([rr, cc]);\n                    }\n                }\n                if (tmp_fill_length === block_dis.length) {\n                    tywx.tt.log(TAG, 'isPreviewCanFill');\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    isCanFill(center_row, center_col, config){\n        let ret = false;\n        let [c_r, c_c] = [center_row, center_col];\n        let [m_r, m_c] = [tywx.tt.constants.BoardHeight, tywx.tt.constants.BoardWidth];\n        let BlockMap = tywx.tt.constants.BlockMap;\n        let fill_blocks = [];\n        let need_fill_num = 0;\n        for (let r = 0; r < config.length; ++r) {\n            let line = config[r];\n            for (let c = 0; c < line.length; ++c) {\n                let dis = BlockMap[r][c];\n                if (config[r][c] !== 0) {\n                    let [b_r, b_c] = [c_r + dis[1], c_c + dis[0]];\n                    if (b_r >= 0 &&\n                        b_r < m_r &&\n                        b_c >= 0 &&\n                        b_c < m_c &&\n                        this.board[b_r][b_c] === 0) {\n                        fill_blocks.push([b_r, b_c, config[r][c]]);\n                    }\n                    need_fill_num++;\n                }\n            }\n        }\n        ret = fill_blocks.length === need_fill_num;\n        if (ret) this.willFillBlocks = fill_blocks;\n        else this.willFillBlocks = [];\n        tywx.tt.warn(TAG, 'isCanFill ', ret ? 'can fill' : 'can not fill');\n        return ret;\n    }\n\n    fillBaordByConfig(center_row, center_col, config, touch_idx) {\n        tywx.tt.warn(TAG, 'start to fillBaord' + touch_idx);\n        if (!this.willFillBlocks || this.willFillBlocks.length === 0) {\n            tywx.tt.warn(TAG, `fillBoard error, this.willFillBlocks=${this.willFillBlocks}`);\n            return;\n        }\n        this.willFillBlocks.forEach(e => {\n            let [r, c] = [e[0], e[1]];\n            if (this.board[r][c] === 0) {\n                this.board[r][c] = e[2];\n                this.emptyBlocks.delete(`${r}_${c}`);\n            } else {\n                tywx.tt.warn(TAG, `fillBoardByConfig error r=${r} c=${c}`);\n            }\n        });\n        tywx.NotificationCenter.trigger(tywx.tt.events.TT_FILL_BOARD, this.willFillBlocks);\n        this.willFillBlocks = [];\n        tywx.NotificationCenter.trigger(tywx.tt.events.HELP_ADD, null);\n        this.previewConfigs[touch_idx] = null;\n        // this.refreshPreviewStat(true);\n        this.outPutBoard();\n        tywx.tt.warn(TAG, 'fillBaord end');\n    }\n\n\n\n    // 填充给定的格子\n    fillBord(alle) {\n        this.willFillBlocks = alle;\n        this.willFillBlocks.forEach(e => {\n            let [r, c] = [e[0], e[1]];\n            if (this.board[r][c] === 0) {\n                this.board[r][c] = e[2];\n                this.emptyBlocks.delete(`${r}_${c}`);\n            } else {\n                tywx.tt.warn(TAG, `fillBoardByConfig error r=${r} c=${c}`);\n            }\n        });\n        tywx.NotificationCenter.trigger(tywx.tt.events.TT_FILL_BOARD, this.willFillBlocks);\n        this.willFillBlocks = [];\n    }\n\n    outPutBoard() {\n        for (let r = this.h - 1; r >= 0; --r) {\n            let line = `Row:${r}===>`;\n            for (let c = 0; c < this.w; ++c) {\n                line += this.board[r][c] + ',';\n            }\n            tywx.tt.log(TAG, line);\n        }\n    }\n\n    resetPreviews(checkpreviewnumber) {\n        if (this.previewConfigs.every(e => e === null)) {\n            // * reset preview\n            tywx.tt.log(TAG, 'reset previews');\n            this.resetPreviewConfigs(false, checkpreviewnumber);\n            tywx.NotificationCenter.trigger(tywx.tt.events.TT_RESET_PREVIEWS, null);\n        }else{\n            tywx.tt.log(TAG, '当前前置设置为空了');\n        }\n    }\n\n    forseResetPreviews() {\n        tywx.tt.log(TAG, 'forseResetPreviews');\n        this.resetPreviewConfigs(true);\n        tywx.NotificationCenter.trigger(tywx.tt.events.TT_RESET_PREVIEWS, null);\n    }\n\n    checkClear() {\n        this.clearRows = [];\n        this.clearCols = [];\n        let tmp_col_fill = [];\n        for (let i = 0; i < this.w; ++i) tmp_col_fill.push(0);\n        for (let r = 0; r < this.board.length; ++r) {\n            let line = this.board[r];\n            let fill_num = 0;\n            for (let c = 0; c < line.length; ++c) {\n                if (this.board[r][c] >= 1) {\n                    tmp_col_fill[c]++;\n                    fill_num++;\n                }\n            }\n            if (fill_num === this.w) {\n                this.clearRows.push(r);\n            }\n            tywx.tt.log(TAG, `row:${r},file_num=${fill_num}`)\n        }\n        for (let i = 0; i < tmp_col_fill.length; ++i) {\n            if (tmp_col_fill[i] === this.h) this.clearCols.push(i);\n        }\n        if (this.clearCols.length > 0 || this.clearRows.length > 0) {\n            this.hasclear = true;\n            tywx.NotificationCenter.trigger(tywx.tt.events.TT_CLEAR_ROW, null);\n        }else{\n            this.hasclear = false;\n            this.refreshPreviewStat();\n        }\n         \n        tywx.tt.log(TAG, `clearRow:${this.clearRows},\\nclearCols:${this.clearCols}`);\n    }\n    \n    getAddScoreByClear(rows, cols){\n           let add_score = 0;\n           var self = this;\n           rows.forEach(e => {\n               for (let c = 0; c < self.w; ++c) {\n                   add_score += tywx.tt.constants.AddScore;\n               }\n           });\n           cols.forEach(e => {\n               for (let r = 0; r < self.h; ++r) {\n                   add_score += tywx.tt.constants.AddScore;\n               }\n           });\n           return add_score;\n    }\n\n    clearBlocks() {\n        //this.clearRows, this.clearCols\n        let self = this;\n        let add_score = 0;\n        this.clearRows.forEach(e => {\n            for (let c = 0; c < self.w; ++c) {\n                self.board[e][c] = 0;\n                add_score += tywx.tt.constants.AddScore;\n                self.emptyBlocks.set(`${e}_${c}`, 0);\n            }\n        });\n        this.clearCols.forEach(e => {\n            for (let r = 0; r < self.h; ++r) {\n                self.board[r][e] = 0;\n                self.emptyBlocks.set(`${r}_${e}`, 0);\n                add_score += tywx.tt.constants.AddScore;\n            }\n        });\n\n        let cleardata = {};\n        cleardata.rows = this.clearRows;\n        cleardata.cols = this.clearCols;\n        // console.log(\"方块清空数据 = \"+JSON.stringify(cleardata));\n        tywx.NotificationCenter.trigger(tywx.tt.events.HELP_ADD, null);\n        this.score += add_score;\n        this.clearCols = [];\n        this.clearRows = [];\n        this.outPutBoard();\n        this.refreshPreviewStat();\n        tywx.tt.log(TAG, 'clearBlocks end');\n        tywx.NotificationCenter.trigger(tywx.tt.events.TT_REFRESH_SCORE, cleardata);\n    }\n\n    hammerClearByRowAndCol(row, col) {\n        let shadow_blocks = [\n            [\n                [-1, 1],\n                [0, 1],\n                [1, 1]\n            ],\n            [\n                [-1, 0],\n                [0, 0],\n                [1, 0]\n            ],\n            [\n                [-1, -1],\n                [0, -1],\n                [1, -1]\n            ]\n        ];\n        let clear_blocks = [];\n        for (let r = 0; r < 3; ++r) {\n            for (let c = 0; c < 3; ++c) {\n                let data = shadow_blocks[r][c];\n                let tmp_col = col + data[0];\n                let tmp_row = row + data[1];\n                if (tmp_col >= 0 && tmp_row >= 0 && tmp_col < this.w && tmp_row < this.h) {\n                    if (this.board[tmp_row][tmp_col] > 0) {\n                        this.board[tmp_row][tmp_col] = 0;\n                        this.emptyBlocks.set(`${tmp_row}_${tmp_col}`, 0);\n                        clear_blocks.push([tmp_row, tmp_col]);\n                    }\n                }\n            }\n        }\n        if (clear_blocks.length > 0) {\n            tywx.tt.log(TAG, 'hammerClearByRowAndCol:' + clear_blocks.length);\n            tywx.NotificationCenter.trigger(tywx.tt.events.TT_CLEAR_HAMMER, clear_blocks);\n        }\n    }\n\n\n    getPreviewConfigs() {\n        return this.previewConfigs;\n    }\n\n    /**\n     * 设置玩家的分数\n     * @param {Number} score 玩家的分数\n     */\n    setScore(score) {\n        this.score = score;\n        tywx.NotificationCenter.trigger(tywx.tt.events.TT_REFRESH_SCORE, null);\n    }\n\n\n}\n\nmodule.exports = ModelBoard;"]}